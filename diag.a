
ARG1
!byte 1,0,0,$01,0
ARG2
!byte 0,0,0,$20,0
DUMMY
!byte 0 
testArith 
    +printFixedPoint ARG1
    +printFixedPoint ARG2
    lda #0
    sta DUMMY
    +callFunc cmp32BitUnsigned, ARG1, ARG2
    bcc .eval
    lda #1
    sta DUMMY
.eval 
    lda DUMMY
    jsr printByteCRLF

    ;+callFunc add32Bit, ARG1, ARG2
    +callFuncMono halve32Bit, ARG1
    +printFixedPoint ARG1

    rts


.FILE_NAME
!byte 16
!tx "                "
.RES_FILE_NAME
!byte 0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0

.INPUT_FILE_NAME
!byte 9
!tx "SAVE IN: "
.PREFIX_OVERWRITE
!byte 3
!tx "@0:"
.POSTFIX_SEQ
!byte 4
!tx ",S,W"
setFileNameAndGo
    lda #0
    sta .RES_FILE_NAME
    lda #16
    sta .FILE_NAME

    +printStr .INPUT_FILE_NAME
    +inputStr .FILE_NAME, .ALPHA
    
    +strCpy .PREFIX_OVERWRITE, .RES_FILE_NAME
    +strCat .FILE_NAME, .RES_FILE_NAME
    +strCat .POSTFIX_SEQ, .RES_FILE_NAME
    +strCpy .RES_FILE_NAME, PIC_FILE_NAME_LEN
    jmp mandelLoop


.LOAD_FILE_NAME
!byte 11
!tx "LOAD FROM: "
.PREFIX_SLOT
!byte 2
!tx "0:"
.POSTFIX_SEQ_READ
!byte 4
!tx ",S,R"

setFileNameAndLoad
    lda #0
    sta .RES_FILE_NAME
    lda #16
    sta .FILE_NAME

    +printStr .LOAD_FILE_NAME
    +inputStr .FILE_NAME, .ALPHA

    +strCpy .PREFIX_SLOT, .RES_FILE_NAME
    +strCat .FILE_NAME, .RES_FILE_NAME
    +strCat .POSTFIX_SEQ_READ, .RES_FILE_NAME
    +strCpy .RES_FILE_NAME, PIC_FILE_NAME_LEN

    jsr loadAndDisplayPic
    lda DISK_ERROR
    beq .waitForKey                      ; zero value in accu => load successfull
    jsr bitMapOff
    jsr printCRLF
    +printStr ERR_BYTE_COUNTER
    jsr printCRLF
    rts
.waitForKey
    jsr waitForKey
    jsr bitMapOff
    rts


testDerive
    +printFixedPoint INIT_REAL
    +printFixedPoint INIT_IMAG
    +printFixedPoint STEP_X
    +printFixedPoint STEP_Y
    jsr printCRLF
    +load16BitImmediate 320, COUNT_X
    lda #200
    sta COUNT_Y
    jsr deriveParametersFromPixel
    +printFixedPoint INIT_REAL
    +printFixedPoint INIT_IMAG
    jsr printCRLF
    jsr increaseZoomLevel
    +printFixedPoint STEP_X
    +printFixedPoint STEP_Y    

    rts


.TEST_STR
!byte 6
!tx "TEST> "

.ALLOWED
!byte 16
!tx "0123456789ABCDEF"

.DIGITS
!byte 10
!tx "0123456789"

.ALPHA
!byte 50
!tx "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.:-+#=() ยง$%&@"

.OUT_STR
!byte 10
!byte 0,0,0,0,0,0,0,0,0,0

.CMP_STR
!byte 0
!tx "0011223344"

.NOT_EQUAL
!byte 9
!tx "NOT EQUAL"

.EQUAL
!byte 5
!tx "EQUAL"

.ERROR
!byte 5
!tx "ERROR"


testInput
    lda #10 
    sta .OUT_STR
    +printStrAt 0, 10, .TEST_STR
    +inputStr .OUT_STR, .ALLOWED
    +strCmpAddr .OUT_STR, .CMP_STR
    bne .notEqual
    +printStrAt 0, 15, .EQUAL
    rts
.notEqual
    +printStrAt 0, 15, .NOT_EQUAL
    +printStrAt 0, 16, .OUT_STR
    rts

.CONV_RESULT
!byte 0,0
testConv
    lda #4 
    sta .OUT_STR
    +printStrAt 0, 10, .TEST_STR
    +inputStr .OUT_STR, .DIGITS
    +atoi .OUT_STR, .CONV_RESULT
    bne .convErr
    jsr printCRLF
    lda .CONV_RESULT+1
    jsr printByte 
    lda .CONV_RESULT
    jsr printByteCRLF
    rts
.convErr
    +printStrAt 0, 11, .ERROR
    rts

.ONE
!byte 3
!tx "1: "

.TWO
!byte 3
!tx "2: "

.STR_SOURCE
!byte 10
!byte 0,0,0,0,0,0,0,0,0,0
.STR_TARGET
!byte 10
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0

testCopy
    lda #10
    sta .STR_TARGET
    sta .STR_SOURCE
    +printStrAt 0, 15, .ONE
    +inputStr .STR_SOURCE, .ALPHA
    +printStrAt 0, 16, .TWO
    +inputStr .STR_TARGET, .ALPHA
    +strCat .STR_SOURCE, .STR_TARGET
    jsr printCRLF
    lda #34
    jsr CHAROUT
    +printStr .STR_TARGET
    lda #34
    jsr CHAROUT
    rts
