GETIN   = $FFE4

HEX_CHARS
!tx "0123456789ABCDEF"

LO_NIBBLE
!byte 0

; --------------------------------------------------
; This routine prints a fixed point number to the screen. The address
; of the number has to be given in $0003/$0004
;
; The number of iterations performed is returned in NUM_ITER 
; --------------------------------------------------
printNumHex
    ldy #0
    lda ($03), y
    bne .printMinus
    lda #43
    jsr $FFD2
    jmp .egal
.printMinus
    lda #45
    jsr $FFD2
.egal

    ldy #4
.loopPrint
    lda ($03), y
    jsr printByte
    dey
    bne .loopPrint
    jsr printCRLF
    rts

!macro printFixedPoint .addr {
    lda #<.addr
    sta $03
    lda #>.addr
    sta $04
    jsr printNumHex
} 

printByteCRLF
    jsr printByte
    jsr printCRLF
    rts

printByte
    jsr splitByte
    stx LO_NIBBLE
    tax
    lda HEX_CHARS, X
    jsr $FFD2
    ldx LO_NIBBLE
    lda HEX_CHARS, X
    jsr $FFD2
    rts

printCRLF
    lda #13
    jsr $FFD2
    lda #10
    jsr $FFD2
    rts

.CONV_TEMP
!byte 0
; --------------------------------------------------
; This routine splits the value in accu its nibbles. The lower nibble 
; is returned in x and its upper nibble in the accu
; --------------------------------------------------
splitByte
    sta .CONV_TEMP
    and #$0F
    tax
    lda .CONV_TEMP
    and #$F0
    lsr
    lsr 
    lsr 
    lsr
    rts

!macro printByteLN .addr {
    lda .addr
    jsr printByteCRLF
}

ARG1
!byte 1,0,0,$c0,0
ARG2
!byte 0,0,0,$20,0
DUMMY
!byte 0 
testAdd 
    +printFixedPoint ARG1
    +printFixedPoint ARG2
    lda #0
    sta DUMMY
    +callFunc cmp32BitUnsigned, ARG1, ARG2
    bcc .eval
    lda #1
    sta DUMMY
.eval 
    lda DUMMY
    jsr printByteCRLF

    +callFunc add32Bit, ARG1, ARG2
    +printFixedPoint ARG2

    rts

; --------------------------------------------------
; Wait for a key and return ASCII Code of key in Accumulator
; 
; INPUT:  None
; OUTPUT: ASCII code of read character in accumulator
; --------------------------------------------------
waitForKey
    jsr GETIN         ; get key from keyboard
    cmp #0            ; if 0, no key pressed
    beq waitForKey    ; loop if no key pressed

    rts               ; ASCII Code of pressed key is now in accumulator



DEFAULT_FILE_NAME_SAVE
!tx "@0:MANDELBROT.PIC,S,W"
setFileNameAndGo
    ldy #0
.copyFileName
    lda DEFAULT_FILE_NAME_SAVE,Y
    sta PIC_FILE_NAME,y
    iny
    cpy #21
    bne .copyFileName
    sty PIC_FILE_NAME_LEN
    jmp mandelLoop


DEFAULT_FILE_NAME_LOAD
!tx "0:MANDELBROT.PIC,S,R"
setFileNameAndLoad
    ldy #0
.copyFileName2
    lda DEFAULT_FILE_NAME_LOAD,Y
    sta PIC_FILE_NAME,y
    iny
    cpy #20
    bne .copyFileName2
    sty PIC_FILE_NAME_LEN
    jsr loadAndDisplayPic
    jsr waitForKey
    jsr deInitHires
    rts
