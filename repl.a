CMD_LEN = 3
SPRITE_0_VECTOR = 2040
SPRITE_0_BLOCK = $3F
SPRITE_0_ADDRESS = SPRITE_0_BLOCK * $40
VIC_BASE = $D000
JOYSTICK2 = $DC00
SPRITE_COLOR = 2
CALC_NOT_CONTINUABLE = 1
CALC_CONTINUABLE = 0


!ifndef SUPER_CPU {
NUM_DELAY_LOOPS = 15
} else {
NUM_DELAY_LOOPS = 250
}

progStart
    jsr showTitleScreen
    jmp readEvalPrintLoop


.TITLE_LINE_1
!byte 38
!byte 147
!byte $0a, $0d
!tx "  MANDELCALC 0.9 BY MARTIN GRAP"
!byte $0a, $0d, $0a, $0d

.TITLE_LINE_2
!byte 27
!tx "        WRITTEN IN 2022"
!byte $0a, $0d, $0a, $0d

.TITLE_LINE_3
!byte 35
!tx " ENTER H FOR HELP AND X TO EXIT"
!byte $0a, $0d, $0a, $0d


showTitleScreen
    +printStr .TITLE_LINE_1
    +printStr .TITLE_LINE_2
    +printStr .TITLE_LINE_3
    rts

.COMMAND
!byte 5
!tx "CMD> "

.CMD_CHARS
!byte 26
!tx "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

.CMD_BUFFER
!byte CMD_LEN
!byte 0,0,0

.EXIT_COMMAND
!byte 1
!tx "X"

.VAL_COMMAND
!byte CMD_LEN
!tx "VAL"

.RUN_COMMAND
!byte CMD_LEN
!tx "RUN"

.LOAD_COMMAND
!byte CMD_LEN
!tx "LOD"

.SAVE_COMMAND
!byte CMD_LEN
!tx "SAV"

.SHOW_COMMAND
!byte CMD_LEN
!tx "SHO"

.PIXEL_COMMAND
!byte CMD_LEN
!tx "PXL"

.SELECT_PIXEL_COMMAND
!byte CMD_LEN
!tx "SXL"

.INC_ZOOM_COMMAND
!byte CMD_LEN
!tx "INZ"

.MULTICOLOR_COMMAND
!byte CMD_LEN
!tx "MCL"

.DOUBLE_X_STEP_COMMAND
!byte CMD_LEN
!tx "DBX"

.SET_ITER_COMMAND
!byte CMD_LEN
!tx "SIT"

.HIRES_COMMAND
!byte CMD_LEN
!tx "HIR"

.HALVE_X_STEP_COMMAND
!byte CMD_LEN
!tx "HVX"

.RESET_COMMAND
!byte CMD_LEN
!tx "RES"

.SET_DEVICE_COMMAND
!byte CMD_LEN
!tx "DEV"

.SET_COLS_COMMAND
!byte CMD_LEN
!tx "SCL"

.SHOW_COLS_COMMAND
!byte CMD_LEN
!tx "GCL"

.CONTINUE_CALC_COMMAND
!byte CMD_LEN
!tx "CNT"

.DIR_COMMAND
!byte CMD_LEN
!tx "DIR"


.HELP_COMMAND
!byte 1
!tx "H"


.COMMAND_NOT_RECOGNIZED
!byte 22
!tx "COMMAND NOT RECOGNIZED"

.ALPHA
!byte 50
!tx "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.:-+#=() ยง$%&@"

.DIGITS
!byte 10
!tx "0123456789"


.CMD_TABLE 
!byte <.VAL_COMMAND, >.VAL_COMMAND, <showValuesCommand, >showValuesCommand
!byte <.RUN_COMMAND, >.RUN_COMMAND, <runCalcCommand, >runCalcCommand
!byte <.LOAD_COMMAND, >.LOAD_COMMAND, <loadCommand, >loadCommand
!byte <.SAVE_COMMAND, >.SAVE_COMMAND, <saveCommand, >saveCommand
!byte <.SHOW_COMMAND, >.SHOW_COMMAND, <showCommand, >showCommand
!byte <.PIXEL_COMMAND, >.PIXEL_COMMAND, <deriveFromPixelCommand, >deriveFromPixelCommand
!byte <.INC_ZOOM_COMMAND, >.INC_ZOOM_COMMAND, <incrementZoomCommand, >incrementZoomCommand
!byte <.MULTICOLOR_COMMAND, >.MULTICOLOR_COMMAND, <multicolorCommand, >multicolorCommand
!byte <.DOUBLE_X_STEP_COMMAND, >.DOUBLE_X_STEP_COMMAND, <doubleXstepCommand, >doubleXstepCommand
!byte <.SET_ITER_COMMAND, >.SET_ITER_COMMAND, <setMaxIterCommand, >setMaxIterCommand
!byte <.HIRES_COMMAND, >.HIRES_COMMAND, <hiresCommand, >hiresCommand
!byte <.HALVE_X_STEP_COMMAND, >.HALVE_X_STEP_COMMAND, <halveXstepCommand, >halveXstepCommand
!byte <.RESET_COMMAND, >.RESET_COMMAND, <resetCommand, >resetCommand
!byte <.SET_DEVICE_COMMAND, >.SET_DEVICE_COMMAND, <setDeviceNumberCommand, >setDeviceNumberCommand
!byte <.SET_COLS_COMMAND, >.SET_COLS_COMMAND, <setColorsCommand, >setColorsCommand
!byte <.SHOW_COLS_COMMAND, >.SHOW_COLS_COMMAND, <showColorsCommand, >showColorsCommand
!byte <.SELECT_PIXEL_COMMAND, >.SELECT_PIXEL_COMMAND, <selectPixelCommand, >selectPixelCommand
!byte <.CONTINUE_CALC_COMMAND, >.CONTINUE_CALC_COMMAND, <continueCommand, >continueCommand
!byte <.DIR_COMMAND, >.DIR_COMMAND, <dirCommand, >dirCommand
!byte <.HELP_COMMAND, >.HELP_COMMAND, <helpCommand, >helpCommand
!byte 0,0,0,0 ; end marker


; --------------------------------------------------
; readEvalPrintLoop
; --------------------------------------------------
readEvalPrintLoop
.cmdLoop
    +printStr .COMMAND
    lda #CMD_LEN
    sta .CMD_BUFFER
    +inputStr .CMD_BUFFER, .CMD_CHARS
    jsr printCRLF
    lda .CMD_BUFFER
    beq .cmdLoop                                       ; do noting when user just pressed enter
    +strCmpAddr .EXIT_COMMAND, .CMD_BUFFER
    beq .done
    jsr processCommand
    jmp .cmdLoop
.done
    rts

.CMD_COUNTER
!byte 0
.CMD_VECTOR
!byte 0,0
.NO_COMMAND
!byte 0,0
; --------------------------------------------------
; processCommand
; --------------------------------------------------
processCommand
    lda #<.CMD_BUFFER
    sta TEMP_PTR2
    lda #>.CMD_BUFFER
    sta TEMP_PTR2+1

    ldx #0
    stx .CMD_COUNTER
.testCommand
    ldx .CMD_COUNTER
    lda .CMD_TABLE,x
    sta TEMP_PTR
    inx
    lda .CMD_TABLE,x
    sta TEMP_PTR+1
    +cmp16Bit .NO_COMMAND, TEMP_PTR
    beq .notFound
    txa
    pha
    jsr strCmp
    bne .nextCommand
    pla
    tax
    inx
    lda .CMD_TABLE,X
    sta .CMD_VECTOR
    inx    
    lda .CMD_TABLE,X
    sta .CMD_VECTOR+1
    jmp (.CMD_VECTOR)
.nextCommand
    pla
    tax
    inx
    inx
    inx
    stx .CMD_COUNTER
    jmp .testCommand 

.notFound
    +printStr .COMMAND_NOT_RECOGNIZED
    jsr printCRLF
    rts

.REAL_TXT
!byte 8
!tx "REAL  : "
.IMAG_TXT
!byte 8
!tx "IMAG  : "
.STEPX_TXT
!byte 8
!tx "STEP X: "
.STEPY_TXT
!byte 8
!tx "STEP Y: "
.ITER_TXT
!byte 9
!tx "ITER  : $"
.DEVICE_TXT
!byte 9
!tx "DEVICE: $"


; --------------------------------------------------
; showValuesCommand
; --------------------------------------------------
showValuesCommand
    +printStr .REAL_TXT
    +printFixedPoint INIT_REAL
    +printStr .IMAG_TXT
    +printFixedPoint INIT_IMAG
    +printStr .STEPX_TXT
    +printFixedPoint STEP_X
    +printStr .STEPY_TXT
    +printFixedPoint STEP_Y
    +printStr .ITER_TXT
    lda MAX_ITER
    jsr printByteCRLF
    +printStr .DEVICE_TXT
    lda DEVICE_NUM
    jsr printByteCRLF

    rts


.CALC_INTERRUPTED_TXT
!byte 23
!tx "CALCULATION INTERRUPTED"

.CONTINUEABLE
!byte CALC_NOT_CONTINUABLE
.SAVED_BACKGROUND_COLOR
!byte 0
; --------------------------------------------------
; runCalcCommand
; --------------------------------------------------
runCalcCommand
    lda 53281
    sta .SAVED_BACKGROUND_COLOR

    jsr initMandel
    jsr bitMapOn

.keyStillPressed
    jsr GETIN
    cmp #0
    bne .keyStillPressed

    lda #CALC_NOT_CONTINUABLE
    sta .CONTINUEABLE

    jsr resetAndStartRTC
.loopUntilFinished
    jsr nextMandel

    jsr GETIN
    cmp #0
    bne .breakRequested

    lda COUNT_Y
    cmp MAX_Y
    bne .loopUntilFinished

    lda #CALC_NOT_CONTINUABLE
    sta .CONTINUEABLE

    jmp .endCalc

.breakRequested
    lda #CALC_CONTINUABLE
    sta .CONTINUEABLE

.endCalc
    jsr bitMapOff
    jsr getElapsedTime
    jsr stopRTC

    lda .SAVED_BACKGROUND_COLOR
    sta 53281

    +printStr ELAPSED_TIME_DESC
    +printStr ELAPSED_TIME_STR
    lda .CONTINUEABLE
    cmp #CALC_CONTINUABLE
    bne .noMessage
    jsr printCRLF
    +printStr .CALC_INTERRUPTED_TXT
.noMessage
    jsr printCRLF
    rts


.CALC_NOT_CONTINUABLE_TXT
!byte 34
!tx "CALCULATION CAN NOT BE CONTINUED"
!byte $0a,$0d

; --------------------------------------------------
; continueCommand
; --------------------------------------------------
continueCommand
    lda .CONTINUEABLE
    cmp #CALC_CONTINUABLE
    bne .notContinuable

    lda 53281
    sta .SAVED_BACKGROUND_COLOR

    jsr turnBitmapOn
    jmp .keyStillPressed

.notContinuable
    +printStr .CALC_NOT_CONTINUABLE_TXT
    rts


.ERR_FILE_NAME_EMPTY
!byte 15
!tx "FILE NAME EMPTY"

.FILE_NAME
!byte 16
!tx "                "
.RES_FILE_NAME
!byte 0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0

.LOAD_FILE_NAME
!byte 11
!tx "LOAD FROM: "
.PREFIX_SLOT
!byte 2
!tx "0:"
.POSTFIX_SEQ_READ
!byte 4
!tx ",S,R"

; --------------------------------------------------
; loadCommand
; --------------------------------------------------
loadCommand
    lda #0
    sta .RES_FILE_NAME
    lda #16
    sta .FILE_NAME

    +printStr .LOAD_FILE_NAME
    +inputStr .FILE_NAME, .ALPHA
    lda .FILE_NAME
    bne .fileNotEmpty
    jmp .emptyFileName
.fileNotEmpty

    lda #CALC_NOT_CONTINUABLE
    sta .CONTINUEABLE

    +strCpy .PREFIX_SLOT, .RES_FILE_NAME
    +strCat .FILE_NAME, .RES_FILE_NAME
    +strCat .POSTFIX_SEQ_READ, .RES_FILE_NAME
    +strCpy .RES_FILE_NAME, PIC_FILE_NAME_LEN

    jsr loadPic
    lda DISK_ERROR
    beq .waitForKey
    jsr printCRLF
    +printStr ERR_BYTE_COUNTER
    jsr printCRLF
    rts
.waitForKey
    lda 53281
    sta .SAVED_BACKGROUND_COLOR

    jsr turnBitmapOn
    jsr waitForKey
    jsr bitMapOff

    lda .SAVED_BACKGROUND_COLOR
    sta 53281

    jsr printCRLF
    rts
.emptyFileName
    jsr printCRLF
    +printStr .ERR_FILE_NAME_EMPTY
    jsr printCRLF
    rts

    
.INPUT_FILE_NAME
!byte 9
!tx "SAVE IN: "
.PREFIX_OVERWRITE
!byte 3
!tx "@0:"
.POSTFIX_SEQ
!byte 4
!tx ",S,W"

; --------------------------------------------------
; saveCommand
; --------------------------------------------------
saveCommand
    lda #0
    sta .RES_FILE_NAME
    lda #16
    sta .FILE_NAME

    +printStr .INPUT_FILE_NAME
    +inputStr .FILE_NAME, .ALPHA
    lda .FILE_NAME
    beq .emptyFileNameSave
    
    +strCpy .PREFIX_OVERWRITE, .RES_FILE_NAME
    +strCat .FILE_NAME, .RES_FILE_NAME
    +strCat .POSTFIX_SEQ, .RES_FILE_NAME
    +strCpy .RES_FILE_NAME, PIC_FILE_NAME_LEN
    jsr savePic
    jsr printCRLF
    rts
.emptyFileNameSave
    jsr printCRLF
    +printStr .ERR_FILE_NAME_EMPTY
    jsr printCRLF
    rts


; --------------------------------------------------
; showCommand
; --------------------------------------------------
showCommand
    lda 53281
    sta .SAVED_BACKGROUND_COLOR

    jsr turnBitmapOn
    jsr waitForKey
    jsr bitMapOff

    lda .SAVED_BACKGROUND_COLOR
    sta 53281

    jsr printCRLF
    rts


.INP_X_COORD
!byte 3
!tx "   "
.INP_Y_COORD
!byte 3
!tx "   "
.TXT_X_COORD
!byte 9
!tx "X COORD: "
.TXT_Y_COORD
!byte 9
!tx "Y COORD: "
.ERR_OUT_OF_RANGE
!byte 18
!tx "VALUE OUT OF RANGE"
.ERR_NO_CONVERT
!byte 15
!tx "CAN NOT CONVERT"


.CONV_RESULT_X
!byte 0,0
.CONV_RESULT_Y
!byte 0,0
.TWO_HUNDRED
!byte 200,0
; --------------------------------------------------
; deriveFromPixelCommand
; --------------------------------------------------
deriveFromPixelCommand
    lda #3
    sta .INP_X_COORD
    sta .INP_Y_COORD

    +printStr .TXT_X_COORD
    +inputStr .INP_X_COORD, .DIGITS
    +atoi .INP_X_COORD, .CONV_RESULT_X
    beq .convOK
    jmp .convErr
.convOK
    +cmp16Bit .CONV_RESULT_X, MAX_X
    bcc .sizeOK
    jmp .tooLargeErr
.sizeOK
    jsr printCRLF

    +printStr .TXT_Y_COORD
    +inputStr .INP_Y_COORD, .DIGITS
    +atoi .INP_Y_COORD, .CONV_RESULT_Y
    bne .convErr
    +cmp16Bit .CONV_RESULT_Y, .TWO_HUNDRED
    bcs .tooLargeErr
    jsr printCRLF

    +move16Bit .CONV_RESULT_X, COUNT_X
    lda .CONV_RESULT_Y
    sta COUNT_Y
    jsr deriveParametersFromPixel

    lda #CALC_NOT_CONTINUABLE
    sta .CONTINUEABLE

    jmp showValuesCommand
.convErr
    jsr printCRLF
    +printStr .ERR_NO_CONVERT
    jsr printCRLF
    rts
.tooLargeErr
    jsr printCRLF
    +printStr .ERR_OUT_OF_RANGE
    jsr printCRLF
    rts


; --------------------------------------------------
; incrementZoomCommand
; --------------------------------------------------
incrementZoomCommand
    jsr increaseZoomLevel

    lda #CALC_NOT_CONTINUABLE
    sta .CONTINUEABLE
    
    jmp showValuesCommand


; --------------------------------------------------
; multicolorCommand
; --------------------------------------------------
multicolorCommand
    jsr setMuticolor

    lda #CALC_NOT_CONTINUABLE
    sta .CONTINUEABLE
    
    rts


; --------------------------------------------------
; hiresCommand
; --------------------------------------------------
hiresCommand
    jsr setHires

    lda #CALC_NOT_CONTINUABLE
    sta .CONTINUEABLE
    
    rts


; --------------------------------------------------
; doubleXstepCommand
; --------------------------------------------------
doubleXstepCommand
    jsr doubleStepX

    lda #CALC_NOT_CONTINUABLE
    sta .CONTINUEABLE

    jmp showValuesCommand


; --------------------------------------------------
; halveXstepCommand
; --------------------------------------------------
halveXstepCommand
    jsr halveStepX

    lda #CALC_NOT_CONTINUABLE
    sta .CONTINUEABLE

    jmp showValuesCommand  
  

; --------------------------------------------------
; resetCommand
; --------------------------------------------------
resetCommand
    jsr resetParameters

    lda #CALC_NOT_CONTINUABLE
    sta .CONTINUEABLE

    jmp showValuesCommand


.TXT_MAX_ITER_INPUT
!byte 10
!tx "MAX ITER: "
.TXT_MAX_ITER
!byte 11
!tx "MAX ITER: $"
.INP_ITER
!byte 3
!tx "   "
.CONV_RESULT_ITER
!byte 0,0
.MAX_ITER_CMP
!byte 255,0
; --------------------------------------------------
; setMaxIterCommand
; --------------------------------------------------
setMaxIterCommand
    lda #3
    sta .INP_ITER

    +printStr .TXT_MAX_ITER_INPUT
    +inputStr .INP_ITER, .DIGITS
    +atoi .INP_ITER, .CONV_RESULT_ITER
    bne .convErrIter
    +cmp16Bit .CONV_RESULT_ITER, .MAX_ITER_CMP
    bcs .tooLargeErrIter
    jsr printCRLF
    lda .CONV_RESULT_ITER
    sta MAX_ITER
    jmp showValuesCommand
.convErrIter
    jsr printCRLF
    +printStr .ERR_NO_CONVERT
    jsr printCRLF
    rts
.tooLargeErrIter
    jsr printCRLF
    +printStr .ERR_OUT_OF_RANGE
    jsr printCRLF
    rts


.TXT_DEVICE_NUMBER_INPUT
!byte 15
!tx "DEVICE NUMBER: "
.TXT_DEVICE_NUMBER
!byte 16
!tx "DEVICE NUMBER: $"
.DEV_NUM_BUFFER
!byte 2
!byte 0,0
.NEW_DEV_NUM
!byte 0,0

; --------------------------------------------------
; setDeviceNumberCommand
; --------------------------------------------------
setDeviceNumberCommand
    lda #2
    sta .DEV_NUM_BUFFER
    +printStr .TXT_DEVICE_NUMBER_INPUT
    +inputStr .DEV_NUM_BUFFER, .DIGITS
    +atoi .DEV_NUM_BUFFER, .NEW_DEV_NUM
    bne .convErrDevNum
    lda .NEW_DEV_NUM
    cmp #12
    bcs .tooLargeErrDevNum
    sta DEVICE_NUM
    jsr printCRLF
    jmp showValuesCommand

.convErrDevNum
    jsr printCRLF
    +printStr .ERR_NO_CONVERT
    jsr printCRLF
    rts
.tooLargeErrDevNum
    jsr printCRLF
    +printStr .ERR_OUT_OF_RANGE
    jsr printCRLF
    rts


.FIRST_COLOR_TXT_INPUT
!byte 10
!tx "FIRST   : "
.SECOND_COLOR_TXT_INPUT
!byte 10
!tx "SECOND  : "
.THIRD_COLOR_TXT_INPUT
!byte 10
!tx "THIRD   : "
.BKGRND_COLOR_TXT_INPUT
!byte 10
!tx "BACKGRND: "


.FIRST_COLOR_TXT
!byte 11
!tx "FIRST   : $"
.SECOND_COLOR_TXT
!byte 11
!tx "SECOND  : $"
.THIRD_COLOR_TXT
!byte 11
!tx "THIRD   : $"
.BKGRND_COLOR_TXT
!byte 11
!tx "BACKGRND: $"

.PIC_COL1
!byte 0
.PIC_COL2
!byte 0
.PIC_COL3
!byte 0
.BACKGROUND_COLOR
!byte 0
; --------------------------------------------------
; setColorsCommand
; --------------------------------------------------
setColorsCommand
    +printStr .FIRST_COLOR_TXT_INPUT
    jsr getColor
    bcs .doneError
    sta .PIC_COL1

    +printStr .SECOND_COLOR_TXT_INPUT
    jsr getColor
    bcs .doneError
    sta .PIC_COL2

    +printStr .THIRD_COLOR_TXT_INPUT
    jsr getColor
    bcs .doneError
    sta .PIC_COL3

    +printStr .BKGRND_COLOR_TXT_INPUT
    jsr getColor
    bcs .doneError
    sta .BACKGROUND_COLOR

    lda .PIC_COL2
    asl
    asl
    asl
    asl
    ora .PIC_COL1
    sta PIC_COLOURS
    lda .PIC_COL3
    sta THIRD_COLOUR
    lda .BACKGROUND_COLOR
    sta BACKGROUND_COLOR
    rts    
.doneError
    rts


; --------------------------------------------------
; showColorsCommand
; --------------------------------------------------
showColorsCommand
    +printStr .FIRST_COLOR_TXT
    lda PIC_COLOURS
    and #$0F
    jsr printByteCRLF

    +printStr .SECOND_COLOR_TXT
    lda PIC_COLOURS
    lsr
    lsr
    lsr
    lsr
    jsr printByteCRLF

    +printStr .THIRD_COLOR_TXT
    lda THIRD_COLOUR
    and #$0F
    jsr printByteCRLF

    +printStr .BKGRND_COLOR_TXT
    lda BACKGROUND_COLOR
    and #$0F
    jsr printByteCRLF

    rts

.COLOR_NUM_BUFFER
!byte 2
!byte 0,0
.NEW_COL_NUM
!byte 0,0
; --------------------------------------------------
; This routine reads a color number from the keyboard.
; 
; The color number is returned in the accu. The value in the accu is valid
; if the carry bit is clear.
; --------------------------------------------------
getColor
    lda #2
    sta .COLOR_NUM_BUFFER
    +inputStr .COLOR_NUM_BUFFER, .DIGITS
    +atoi .COLOR_NUM_BUFFER, .NEW_COL_NUM
    bne .convErrColNum
    lda .NEW_COL_NUM
    cmp #16
    bcs .tooLargeErrColNum
    jsr printCRLF
    lda .NEW_COL_NUM
    clc                               ; unnecessary, but clearer => indicate success
    rts

.convErrColNum
    jsr printCRLF
    +printStr .ERR_NO_CONVERT
    jsr printCRLF
    sec                               ; indicate error
    rts
.tooLargeErrColNum
    jsr printCRLF
    +printStr .ERR_OUT_OF_RANGE
    jsr printCRLF
    sec                               ; indicate error
    rts


CROSSHAIR_ICON
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00000000, %00000000
!byte %11111111, %00000000, %11111111
!byte %00000000, %00000000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000
!byte %00000000, %00011000, %00000000


.SPRITE_X_POS
!byte 0,0
.SPRITE_Y_POS
!byte 100
; --------------------------------------------------
; crosshairSymbolOn shows a crosshair sprite on screen
;
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
crosshairSymbolOn
    ldx #0
.copySprite
    lda CROSSHAIR_ICON, x
    sta SPRITE_0_ADDRESS, x
    inx
    cpx #63
    bne .copySprite

    lda #0
    sta .SPRITE_X_POS+1
    lda #100
    sta .SPRITE_X_POS
    sta .SPRITE_Y_POS

    ; set sprite block for sprite 0
    lda #SPRITE_0_BLOCK
    sta SPRITE_0_VECTOR

    ; set sprite X position for sprite 0
    lda .SPRITE_X_POS
    sta VIC_BASE
    lda VIC_BASE + 16
    ora .SPRITE_X_POS+1
    sta VIC_BASE + 16
    ; set sprite 0 Y position
    lda .SPRITE_Y_POS
    sta VIC_BASE + 1

    ; set color of sprite 0
    lda #SPRITE_COLOR
    sta VIC_BASE + 39

    ; turn sprite 0 on
    lda VIC_BASE +  21
    ora #1
    sta VIC_BASE + 21

    rts


; --------------------------------------------------
; crosshairSymbolOff turns off a crosshair sprite on screen
;
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
crosshairSymbolOff
    ; turn sprite 0 off
    lda VIC_BASE +  21
    and #$FE
    sta VIC_BASE + 21

    rts


.MIN_SPRITE_Y
!byte 40
.MAX_SPRITE_Y
!byte 239
.MIN_SPRITE_X
!byte 12,0
.MAX_SPRITE_X
!byte $4c, 1
; --------------------------------------------------
; Use a joystick in port 2 to control a crosshair sprite on the screen
; in order to select a new start value used for a following calculation.
; This routine returns when the fire button is pressed.
;  
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
waitForJoystick
.loopJoy
    lda JOYSTICK2
    cmp #$7e          ; up
    beq .upFound
    cmp #$7d          ; down
    beq .downFound
    cmp #$7b          ; left
    beq .leftFound
    cmp #$77          ; right   
    beq .rightFound
    cmp #$6f          ; fire
    beq .quitFound
    bne .loopJoy
.upFound
    lda .SPRITE_Y_POS
    cmp .MIN_SPRITE_Y
    beq .loopJoy
    dec .SPRITE_Y_POS
    jmp .setSpritePos
.downFound
    lda .SPRITE_Y_POS
    cmp .MAX_SPRITE_Y
    beq .loopJoy
    inc .SPRITE_Y_POS
    jmp .setSpritePos
.leftFound
    +cmp16Bit .MIN_SPRITE_X, .SPRITE_X_POS
    beq .loopJoy
    +dec16Bit .SPRITE_X_POS
    jmp .setSpritePos
.rightFound
    +cmp16Bit .MAX_SPRITE_X, .SPRITE_X_POS
    beq .loopJoy
    +inc16Bit .SPRITE_X_POS
    jmp .setSpritePos
.quitFound
    rts
.setSpritePos
    ; set sprite X position for sprite 0
    lda .SPRITE_X_POS
    sta VIC_BASE
    lda VIC_BASE + 16
    and #%11111110
    ora .SPRITE_X_POS+1
    sta VIC_BASE + 16

    ;set sprite Y position for sprite 0
    lda .SPRITE_Y_POS
    sta VIC_BASE + 1

    ldy #0
    ldx #0
.pause
    inx
    bne .pause
    iny
    cpy #NUM_DELAY_LOOPS
    bne .pause

    jmp .loopJoy


.TXT_X_COORD_DOLLAR
!byte 10
!tx "X COORD: $"
.TXT_Y_COORD_DOLLAR
!byte 10
!tx "Y COORD: $"


; --------------------------------------------------
; selectPixelCommand
; --------------------------------------------------
selectPixelCommand
    lda 53281
    sta .SAVED_BACKGROUND_COLOR

    jsr turnBitmapOn
    jsr crosshairSymbolOn
    jsr waitForJoystick
    jsr crosshairSymbolOff
    jsr bitMapOff

    lda .SAVED_BACKGROUND_COLOR
    sta 53281

    lda .SPRITE_Y_POS
    sec
    sbc .MIN_SPRITE_Y
    sta COUNT_Y

    +sub16Bit .MIN_SPRITE_X, .SPRITE_X_POS
    +cmp16BitImmediate 319, .SPRITE_X_POS        ; carry is set if 319 >= *.SPRITE_X_POS
    bcs .noCorrection                            
    +load16BitImmediate 319, .SPRITE_X_POS       ; value is >= 320 set value to 319 instead
.noCorrection
    +move16Bit .SPRITE_X_POS, COUNT_X

    jsr transformXCoord                          ; adapt x-coordinate accordingly in case a multicolor bitmap is used
    
    +printStr .TXT_Y_COORD_DOLLAR
    lda COUNT_Y
    jsr printByteCRLF

    +printStr .TXT_X_COORD_DOLLAR
    lda COUNT_X+1
    jsr printByte
    lda COUNT_X
    jsr printByteCRLF
    jsr printCRLF

    jsr deriveParametersFromPixel
    jmp showValuesCommand



.COMMAND_NOT_IMPLEMENTED
!byte 19
!tx "NOT YET IMPLEMENTED"
; --------------------------------------------------
; helpCommand
; --------------------------------------------------
helpCommand
    ldx #0
.commandLoop
    lda .CMD_TABLE,x
    sta TEMP_PTR
    inx
    lda .CMD_TABLE,x
    sta TEMP_PTR+1
    +cmp16Bit .NO_COMMAND, TEMP_PTR
    beq .allPrinted
    txa
    pha
    jsr printString
    jsr printCRLF
    pla
    tax
    inx
    inx
    inx
    jmp .commandLoop 

.allPrinted
    lda #88                                 ; add X command to help, as it is built in
    jsr CHAROUT
    jsr printCRLF
    rts


.CIA_RTC_TENTH_SECONDS = $DC08
.CIA_RTC_SECONDS = $DC09
.CIA_RTC_MINUTES = $DC0A
.CIA_RTC_HOURS = $DC0B
.CIA_CONTROL_REG = $DC0E

ELAPSED_TIME_STR
!byte 8
!tx "00:00:00"

ELAPSED_TIME_DESC
!byte 14
!tx "ELAPSED TIME: "
; --------------------------------------------------
; getElapsedTime reads the current time of day from the CIA 1
; 
; The output value is directly written to ELAPSED_TIME_STR.
; --------------------------------------------------
getElapsedTime
    lda .CIA_RTC_HOURS                ; this freezes the RTC registers
    jsr splitByte
    tay
    lda .DIGITS+1, X
    sta ELAPSED_TIME_STR + 2
    lda .DIGITS+1, y
    sta ELAPSED_TIME_STR + 1

    lda .CIA_RTC_MINUTES
    jsr splitByte
    tay
    lda .DIGITS+1, X
    sta ELAPSED_TIME_STR + 5
    lda .DIGITS+1, y
    sta ELAPSED_TIME_STR + 4

    lda .CIA_RTC_SECONDS
    jsr splitByte
    tay
    lda .DIGITS+1, X
    sta ELAPSED_TIME_STR + 8
    lda .DIGITS+1, y
    sta ELAPSED_TIME_STR + 7

    lda .CIA_RTC_TENTH_SECONDS               ; unfreeze registers

    rts
 

; --------------------------------------------------
; resetAndStartRTC sets the system time of day clock to 00:00:00 and (re)starts it
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
resetAndStartRTC
!ifdef CLOCK_50_HZ {
    ; set base frequency for RTC to 50Hz 
    lda .CIA_CONTROL_REG
    ora #%10000000
    sta .CIA_CONTROL_REG
}
    ; set rtc to 0
    lda #$00
    sta .CIA_RTC_HOURS
    sta .CIA_RTC_MINUTES
    sta .CIA_RTC_SECONDS
    sta .CIA_RTC_TENTH_SECONDS               ; this starts the RTC
    lda .CIA_RTC_TENTH_SECONDS               ; unfreeze RTC registers

    rts

.IO_ERROR_TXT
!byte 10
!tx "IO ERROR"
!byte $0d,$0a

; --------------------------------------------------
; stopRTC stops the RTC
; 
; INPUT:  None
; OUTPUT: None
; --------------------------------------------------
stopRTC
    lda .CIA_RTC_HOURS
    sta .CIA_RTC_HOURS
    rts


.CURRENT_POS_OFFSET
!byte 0
.MAX_POS_OFFSET
!byte 0
; --------------------------------------------------
; printDataOffset prints as many bytes as indicated by the X register 
; from the memory address to which TEMP_PTR points
; 
; INPUT:  X contains length, TEMP_PTR points to the data 
; OUTPUT: None
; --------------------------------------------------
printDataOffset
    stx .MAX_POS_OFFSET
    lda #0
    sta .CURRENT_POS_OFFSET
.printOffsetLoop
    ldy .CURRENT_POS_OFFSET
    cpy .MAX_POS_OFFSET
    beq .donePrintOffset
    lda (TEMP_PTR),y
    jsr CHAROUT 
    inc .CURRENT_POS_OFFSET
    jmp .printOffsetLoop
.donePrintOffset
    rts


!macro printOffset .addr, .length {
    +load16BitImmediate .addr, TEMP_PTR
    ldx #.length
    jsr printDataOffset
}

!macro printOffsetMem .addr, .length {
    +move16Bit .addr, TEMP_PTR
    ldx #.length
    jsr printDataOffset
}

.FILE_TYPE_SEQ_TXT
!byte 3
!tx "SEQ"
.FILE_TYPE_PRG_TXT
!byte 3
!tx "PRG"
.FILE_TYPE_USR_TXT
!byte 3
!tx "USR"
.FILE_TYPE_REL_TXT
!byte 3
!tx "REL"
.FILE_TYPE_CBM_TXT
!byte 3
!tx "CBM"

.FILE_EXT_TAB
!byte <.FILE_TYPE_SEQ_TXT, >.FILE_TYPE_SEQ_TXT
!byte <.FILE_TYPE_PRG_TXT, >.FILE_TYPE_PRG_TXT
!byte <.FILE_TYPE_USR_TXT, >.FILE_TYPE_USR_TXT
!byte <.FILE_TYPE_REL_TXT, >.FILE_TYPE_REL_TXT
!byte <.FILE_TYPE_CBM_TXT, >.FILE_TYPE_CBM_TXT

.SPACER
!byte 2
!tx "  "
.DIR_ENTRY_LEN
!byte 32, 0
.CURRENT_OFFSET
!byte 0, 0
.ENTRY_COUNTER
!byte 0
.ENTRY_ADDRESS
!byte 0,0
.FILE_TYPE
!byte 0
; --------------------------------------------------
; printDirectoryEntries prints all the directory entries currently
; stored at BLOCK_BUFFER
; --------------------------------------------------
printDirectoryEntries
    lda #0
    sta .ENTRY_COUNTER
    +load16BitImmediate 2, .CURRENT_OFFSET
.nextDirEntry
    lda .ENTRY_COUNTER
    cmp #8
    bne .continuePrintEntry
    jmp .donePrintEntries
.continuePrintEntry    
    +load16BitImmediate BLOCK_BUFFER, .ENTRY_ADDRESS
    +add16Bit .CURRENT_OFFSET, .ENTRY_ADDRESS
    ; look at file type    
    +move16Bit .ENTRY_ADDRESS, TEMP_PTR
    ldy #0
    lda (TEMP_PTR), y
    and #%00000111                                             ; file type is in the lower three bits
    beq .deletedEntry
    tay
    dey
    sty .FILE_TYPE                                             ; file type = 0 => deleted entry
    ; print file name
    +printStr .SPACER
    +inc16Bit .ENTRY_ADDRESS
    +inc16Bit .ENTRY_ADDRESS
    +inc16Bit .ENTRY_ADDRESS
    +printOffsetMem .ENTRY_ADDRESS, 16                         ; print file name
    lda #32
    jsr CHAROUT
    ; load file extension to print
    lda .FILE_TYPE
    asl
    tay
    lda .FILE_EXT_TAB,y
    sta TEMP_PTR
    iny
    lda .FILE_EXT_TAB,y
    sta TEMP_PTR+1
    jsr printString

    jsr printCRLF
.deletedEntry
    inc .ENTRY_COUNTER
    +add16Bit .DIR_ENTRY_LEN, .CURRENT_OFFSET
    jmp .nextDirEntry
.donePrintEntries
    rts

.TXT_FREE_BLOCKS
!byte 14
!tx "FREE BLOCKS: $"
.NEXT_TRACK
!byte 0
.NEXT_SECTOR
!byte 0
.FREE_BLOCKS
!byte 0, 0
.FREE_BLOCKS_IN_TRACK
!byte 0, 0
; --------------------------------------------------
; dirCommand
; --------------------------------------------------
dirCommand
    +load16BitImmediate 0, .FREE_BLOCKS
    +readBlockImmediate 18,0
    cmp #DISK_IO_OK
    beq .continueDirCommand
    jmp .printDiskError
.continueDirCommand
    ; print disk name
    +printOffset BLOCK_BUFFER+144, 16
    jsr printCRLF

    ; calculate number of free blocks on disk
    ldy #4
.addNextBlocks
    lda BLOCK_BUFFER, y
    sta .FREE_BLOCKS_IN_TRACK
    +add16Bit .FREE_BLOCKS_IN_TRACK, .FREE_BLOCKS
    iny
    iny
    iny
    iny
    cpy #144
    bne .addNextBlocks

    ldy #18*4
    lda BLOCK_BUFFER, y
    sta .FREE_BLOCKS_IN_TRACK
    +sub16Bit .FREE_BLOCKS_IN_TRACK, .FREE_BLOCKS             ; subtract the free blocks of track 18

.loopDirectoryBlocks
    ; test for last block
    +cmp16BitImmediate $FF00, BLOCK_BUFFER
    beq .dirFinish

    ; read next block of directory
    +readBlock BLOCK_BUFFER, BLOCK_BUFFER+1
    cmp #DISK_IO_OK
    bne .printDiskError

    jsr printDirectoryEntries
    jmp .loopDirectoryBlocks

.dirFinish
    +printStr .TXT_FREE_BLOCKS
    lda .FREE_BLOCKS+1
    jsr printByte
    lda .FREE_BLOCKS
    jsr printByteCRLF

    rts
.printDiskError
    +printStr .IO_ERROR_TXT
    +printStr ERR_BYTE_COUNTER
    jsr printCRLF
    rts
