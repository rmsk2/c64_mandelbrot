CMD_LEN = 3

.COMMAND
!byte 5
!tx "CMD> "

.CMD_CHARS
!byte 26
!tx "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

.CMD_BUFFER
!byte CMD_LEN
!byte 0,0,0

.EXIT_COMMAND
!byte 1
!tx "X"

.VAL_COMMAND
!byte CMD_LEN
!tx "VAL"

.RUN_COMMAND
!byte CMD_LEN
!tx "RUN"

.LOAD_COMMAND
!byte CMD_LEN
!tx "LOD"

.SAVE_COMMAND
!byte CMD_LEN
!tx "SAV"

.SHOW_COMMAND
!byte CMD_LEN
!tx "SHO"

.PIXEL_COMMAND
!byte CMD_LEN
!tx "PXL"

.INC_ZOOM_COMMAND
!byte CMD_LEN
!tx "INZ"

.MULTICOLOR_COMMAND
!byte CMD_LEN
!tx "MCL"

.DOUBLE_X_STEP_COMMAND
!byte CMD_LEN
!tx "DBX"

.SET_ITER_COMMAND
!byte CMD_LEN
!tx "SIT"

.HIRES_COMMAND
!byte CMD_LEN
!tx "HIR"

.HALVE_X_STEP_COMMAND
!byte CMD_LEN
!tx "HVX"

.RESET_COMMAND
!byte CMD_LEN
!tx "RES"

.SET_DEVICE_COMMAND
!byte CMD_LEN
!tx "DEV"

.SET_COLS_COMMAND
!byte CMD_LEN
!tx "COL"

.HELP_COMMAND
!byte 1
!tx "H"


.COMMAND_NOT_RECOGNIZED
!byte 22
!tx "COMMAND NOT RECOGNIZED"

.ALPHA
!byte 50
!tx "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.:-+#=() ยง$%&@"

.DIGITS
!byte 10
!tx "0123456789"


.CMD_TABLE 
!byte <.VAL_COMMAND, >.VAL_COMMAND, <showValuesCommand, >showValuesCommand
!byte <.RUN_COMMAND, >.RUN_COMMAND, <runCalcCommand, >runCalcCommand
!byte <.LOAD_COMMAND, >.LOAD_COMMAND, <loadCommand, >loadCommand
!byte <.SAVE_COMMAND, >.SAVE_COMMAND, <saveCommand, >saveCommand
!byte <.SHOW_COMMAND, >.SHOW_COMMAND, <showCommand, >showCommand
!byte <.PIXEL_COMMAND, >.PIXEL_COMMAND, <deriveFromPixelCommand, >deriveFromPixelCommand
!byte <.INC_ZOOM_COMMAND, >.INC_ZOOM_COMMAND, <incrementZoomCommand, >incrementZoomCommand
!byte <.MULTICOLOR_COMMAND, >.MULTICOLOR_COMMAND, <multicolorCommand, >multicolorCommand
!byte <.DOUBLE_X_STEP_COMMAND, >.DOUBLE_X_STEP_COMMAND, <doubleXstepCommand, >doubleXstepCommand
!byte <.SET_ITER_COMMAND, >.SET_ITER_COMMAND, <setMaxIterCommand, >setMaxIterCommand
!byte <.HIRES_COMMAND, >.HIRES_COMMAND, <hiresCommand, >hiresCommand
!byte <.HALVE_X_STEP_COMMAND, >.HALVE_X_STEP_COMMAND, <halveXstepCommand, >halveXstepCommand
!byte <.RESET_COMMAND, >.RESET_COMMAND, <resetCommand, >resetCommand
!byte <.SET_DEVICE_COMMAND, >.SET_DEVICE_COMMAND, <setDeviceNumberCommand, >setDeviceNumberCommand
!byte <.SET_COLS_COMMAND, >.SET_COLS_COMMAND, <notYetImplemented, >notYetImplemented
!byte <.HELP_COMMAND, >.HELP_COMMAND, <notYetImplemented, >notYetImplemented
!byte 0,0,0,0 ; end marker



readEvalPrintLoop
.cmdLoop
    +printStr .COMMAND
    lda #CMD_LEN
    sta .CMD_BUFFER
    +inputStr .CMD_BUFFER, .CMD_CHARS
    jsr printCRLF
    +strCmpAddr .EXIT_COMMAND, .CMD_BUFFER
    beq .done
    jsr processCommand
    jmp .cmdLoop
.done
    rts

.CMD_COUNTER
!byte 0
.CMD_VECTOR
!byte 0,0
.NO_COMMAND
!byte 0,0
processCommand
    lda #<.CMD_BUFFER
    sta TEMP_PTR2
    lda #>.CMD_BUFFER
    sta TEMP_PTR2+1

    ldx #0
    stx .CMD_COUNTER
.testCommand
    ldx .CMD_COUNTER
    lda .CMD_TABLE,x
    sta TEMP_PTR
    inx
    lda .CMD_TABLE,x
    sta TEMP_PTR+1
    +cmp16Bit .NO_COMMAND, TEMP_PTR
    beq .notFound
    txa
    pha
    jsr strCmp
    bne .nextCommand
    pla
    tax
    inx
    lda .CMD_TABLE,X
    sta .CMD_VECTOR
    inx    
    lda .CMD_TABLE,X
    sta .CMD_VECTOR+1
    jmp (.CMD_VECTOR)
.nextCommand
    pla
    tax
    inx
    inx
    inx
    stx .CMD_COUNTER
    jmp .testCommand 

.notFound
    +printStr .COMMAND_NOT_RECOGNIZED
    jsr printCRLF
    rts

.REAL_TXT
!byte 8
!tx "REAL  : "
.IMAG_TXT
!byte 8
!tx "IMAG  : "
.STEPX_TXT
!byte 8
!tx "STEP X: "
.STEPY_TXT
!byte 8
!tx "STEP Y: "
.ITER_TXT
!byte 8
!tx "ITER  : "
.DEVICE_TXT
!byte 8
!tx "DEVICE: "


.COMMAND_NOT_IMPLEMENTED
!byte 19
!tx "NOT YET IMPLEMENTED"

notYetImplemented
    +printStr .COMMAND_NOT_IMPLEMENTED
    jsr printCRLF
    rts


showValuesCommand
    +printStr .REAL_TXT
    +printFixedPoint INIT_REAL
    +printStr .IMAG_TXT
    +printFixedPoint INIT_IMAG
    +printStr .STEPX_TXT
    +printFixedPoint STEP_X
    +printStr .STEPY_TXT
    +printFixedPoint STEP_Y
    +printStr .ITER_TXT
    lda MAX_ITER
    jsr printByteCRLF
    +printStr .DEVICE_TXT
    lda DEVICE_NUM
    jsr printByteCRLF

    rts


runCalcCommand
    jsr initMandel
    jsr bitMapOn

.loopUntilFinished
    jsr nextMandel
    lda COUNT_Y
    cmp MAX_Y
    bne .loopUntilFinished

    jsr bitMapOff
    rts



.FILE_NAME
!byte 16
!tx "                "
.RES_FILE_NAME
!byte 0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0
!byte 0,0,0,0,0,0,0,0,0,0

.LOAD_FILE_NAME
!byte 11
!tx "LOAD FROM: "
.PREFIX_SLOT
!byte 2
!tx "0:"
.POSTFIX_SEQ_READ
!byte 4
!tx ",S,R"

loadCommand
    lda #0
    sta .RES_FILE_NAME
    lda #16
    sta .FILE_NAME

    +printStr .LOAD_FILE_NAME
    +inputStr .FILE_NAME, .ALPHA

    +strCpy .PREFIX_SLOT, .RES_FILE_NAME
    +strCat .FILE_NAME, .RES_FILE_NAME
    +strCat .POSTFIX_SEQ_READ, .RES_FILE_NAME
    +strCpy .RES_FILE_NAME, PIC_FILE_NAME_LEN

    jsr loadPic
    lda DISK_ERROR
    beq .waitForKey
    jsr printCRLF
    +printStr ERR_BYTE_COUNTER
    jsr printCRLF
    rts
.waitForKey
    jsr turnBitmapOn
    jsr waitForKey
    jsr bitMapOff
    jsr printCRLF
    rts
    
.INPUT_FILE_NAME
!byte 9
!tx "SAVE IN: "
.PREFIX_OVERWRITE
!byte 3
!tx "@0:"
.POSTFIX_SEQ
!byte 4
!tx ",S,W"


saveCommand
    lda #0
    sta .RES_FILE_NAME
    lda #16
    sta .FILE_NAME

    +printStr .INPUT_FILE_NAME
    +inputStr .FILE_NAME, .ALPHA
    
    +strCpy .PREFIX_OVERWRITE, .RES_FILE_NAME
    +strCat .FILE_NAME, .RES_FILE_NAME
    +strCat .POSTFIX_SEQ, .RES_FILE_NAME
    +strCpy .RES_FILE_NAME, PIC_FILE_NAME_LEN
    jsr savePic
    jsr printCRLF
    rts

showCommand
    jsr turnBitmapOn
    jsr waitForKey
    jsr bitMapOff
    jsr printCRLF
    rts


.INP_X_COORD
!byte 3
!tx "   "
.INP_Y_COORD
!byte 3
!tx "   "
.TXT_X_COORD
!byte 9
!tx "X COORD: "
.TXT_Y_COORD
!byte 9
!tx "Y COORD: "
.ERR_OUT_OF_RANGE
!byte 18
!tx "VALUE OUT OF RANGE"
.ERR_NO_CONVERT
!byte 15
!tx "CAN NOT CONVERT"


.CONV_RESULT_X
!byte 0,0
.CONV_RESULT_Y
!byte 0,0
.TWO_HUNDRED
!byte 200,0
deriveFromPixelCommand
    lda #3
    sta .INP_X_COORD
    sta .INP_Y_COORD

    +printStr .TXT_X_COORD
    +inputStr .INP_X_COORD, .DIGITS
    +atoi .INP_X_COORD, .CONV_RESULT_X
    bne .convErr
    +cmp16Bit .CONV_RESULT_X, MAX_X
    bcs .tooLargeErr
    jsr printCRLF

    +printStr .TXT_Y_COORD
    +inputStr .INP_Y_COORD, .DIGITS
    +atoi .INP_Y_COORD, .CONV_RESULT_Y
    bne .convErr
    +cmp16Bit .CONV_RESULT_Y, .TWO_HUNDRED
    bcs .tooLargeErr
    jsr printCRLF

    +move16Bit .CONV_RESULT_X, COUNT_X
    lda .CONV_RESULT_Y
    sta COUNT_Y
    jsr deriveParametersFromPixel
    jmp showValuesCommand
.convErr
    jsr printCRLF
    +printStr .ERR_NO_CONVERT
    jsr printCRLF
    rts
.tooLargeErr
    jsr printCRLF
    +printStr .ERR_OUT_OF_RANGE
    jsr printCRLF
    rts


incrementZoomCommand
    jsr increaseZoomLevel
    jmp showValuesCommand


multicolorCommand
    jsr setMuticolor
    rts


hiresCommand
    jsr setHires
    rts


doubleXstepCommand
    jsr doubleStepX
    jmp showValuesCommand


halveXstepCommand
    jsr halveStepX
    jmp showValuesCommand  
  

resetCommand
    jsr resetParameters
    jmp showValuesCommand


.TXT_MAX_ITER
!byte 10
!tx "MAX ITER: "
.INP_ITER
!byte 3
!tx "   "
.CONV_RESULT_ITER
!byte 0,0
.MAX_ITER_CMP
!byte 255,0
setMaxIterCommand
    lda #3
    sta .INP_ITER

    +printStr .TXT_MAX_ITER
    +inputStr .INP_ITER, .DIGITS
    +atoi .INP_ITER, .CONV_RESULT_ITER
    bne .convErrIter
    +cmp16Bit .CONV_RESULT_ITER, .MAX_ITER_CMP
    bcs .tooLargeErrIter
    jsr printCRLF
    lda .CONV_RESULT_ITER
    sta MAX_ITER
    jmp showValuesCommand
.convErrIter
    jsr printCRLF
    +printStr .ERR_NO_CONVERT
    jsr printCRLF
    rts
.tooLargeErrIter
    jsr printCRLF
    +printStr .ERR_OUT_OF_RANGE
    jsr printCRLF
    rts


.TXT_DEVICE_NUMBER
!byte 15
!tx "DEVICE NUMBER: "
.DEV_NUM_BUFFER
!byte 2
!byte 0,0
.NEW_DEV_NUM
!byte 0,0

setDeviceNumberCommand
    lda #2
    sta .DEV_NUM_BUFFER
    +printStr .TXT_DEVICE_NUMBER
    +inputStr .DEV_NUM_BUFFER, .DIGITS
    +atoi .DEV_NUM_BUFFER, .NEW_DEV_NUM
    bne .convErrDevNum
    lda .NEW_DEV_NUM
    cmp #12
    bcs .tooLargeErrDevNum
    sta DEVICE_NUM
    jsr printCRLF
    jmp showValuesCommand

.convErrDevNum
    jsr printCRLF
    +printStr .ERR_NO_CONVERT
    jsr printCRLF
    rts
.tooLargeErrDevNum
    jsr printCRLF
    +printStr .ERR_OUT_OF_RANGE
    jsr printCRLF
    rts
