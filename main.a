!to "mandelbr", cbm
*=$c000

FAST_MUL = 1

REAL
!byte 0,2,0,0,0

IMAG
!byte 0,3,0,0,0

MAX_ITER
!byte 64

PIC_COLOURS
!byte $01

NUM_ITER
!byte 0

STEP_X
!byte 0, 0, $c0, 0, 0

STEP_Y
!byte 1, $AA, $AA, 0, 0

INIT_REAL
!byte 1, 0, 0, 0, 2

INIT_IMAG
!byte 0, 0, 0, 0, 1

COUNT_X
!byte 0, 0

COUNT_Y
!byte 0

MAX_X
!byte 0,0 

MAX_Y 
!byte 0

XN
!byte 0,0,0,0,0

YN
!byte 0,0,0,0,0

XN_OLD
!byte 0,0,0,0,0

COND1
!byte 0,0,0,0,0

TEMP
!byte 0,0,0,0,0

VAL_MAX
!byte 0,1,0,0,4

!zone arith
!source "arith16.a"

!zone diag
!source "diag.a"

!zone hires
!source "hires.a"

!zone main

; --------------------------------------------------
; This routine test if calcualtion of the Mandelbrot sequence should be stopped.
; It is stopped, when the iteration count reached MAX_ITER of the absolute value
; of the current sequence value is larger than 4
;
; This routine returns a nonzero value if computation has to be stopped. The zero
; flag is cleared in this case.
; --------------------------------------------------
testMandelbrotDone
    lda NUM_ITER
    cmp MAX_ITER
    bne .testLimit
    jmp .stopCalc

.testLimit
    ; *****************************
    ; abs_val = xn*xn + yn*yn
    ; *****************************

    ; TEMP <= XN
    +callFunc move32Bit, XN, TEMP
    ; TEMP <= TEMP * TEMP
    +callFunc mul32BitNormalized, TEMP, TEMP
    ; COND1 <= YN
    +callFunc move32Bit, YN, COND1
    ; COND1 <= COND1 * COND1
    +callFunc mul32BitNormalized, COND1, COND1
    ; TEMP <= COND1 + TEMP
    +callFunc add32Bit, COND1, TEMP

    ; Carry is set if TEMP >= 4 + 1/2^24
    +callFunc cmp32BitUnsigned, TEMP, VAL_MAX 
    bcs .stopCalc
.continueCalc
    lda #0
    rts
.stopCalc
    lda #1
    rts

; --------------------------------------------------
; This routine calculates the Mandelbrot sequence for the complex value given through
; REAL und IMAG.
;
; The number of iterations performed is returned in NUM_ITER 
; --------------------------------------------------
calcOneMandelbrotSequence
    lda #1
    sta NUM_ITER

    ; REAL <= XN
    +callFunc move32Bit, REAL, XN
    ; YN <= IMAG
    +callFunc move32Bit, IMAG, YN

.loopMandelbrot
    jsr testMandelbrotDone
    beq .continueMandelbrot
    jmp .endMandelbrot

.continueMandelbrot
    ;+printByteLN NUM_ITER
    ;+printFixedPoint XN
    ;+printFixedPoint YN

    ; XN_OLD <= XN
    +callFunc move32Bit, XN, XN_OLD
    
    ; *****************************
    ; xn+1 = xn*xn - yn*yn + real
    ; *****************************

    ; XN <= XN * XN
    +callFunc mul32BitNormalized, XN, XN
    ; TEMP <= YN
    +callFunc move32Bit, YN, TEMP
    ; TEMP <= TEMP * TEMP
    +callFunc mul32BitNormalized, TEMP, TEMP
    ; TEMP <= -TEMP
    +callFuncMono neg32, TEMP
    ; XN <= - TEMP + XN
    +callFunc add32Bit, TEMP, XN
    ; XN <= REAL + XN
    +callFunc add32Bit, REAL, XN

    ; *****************************
    ; yn+1 = 2*xn*yn + imag
    ; *****************************

    ; YN <= XN_OLD * YN 
    +callFunc mul32BitNormalized, XN_OLD, YN
    ; YN <= 2*YN
    +callFuncMono double32Bit, YN
    ; YN <= IMAG + YN
    +callFunc add32Bit, IMAG, YN 

    inc NUM_ITER
    jmp .loopMandelbrot

.endMandelbrot
    rts

initMandel
    ; set limits
    +load16BitImmediate 320, MAX_X
    lda #200
    sta MAX_Y
    ; set start values
    +load16BitImmediate 0, COUNT_X
    lda #0
    sta COUNT_Y
    ; reset complex numbers
    +callFunc move32Bit, INIT_REAL, REAL
    +callFunc move32Bit, INIT_IMAG, IMAG

    rts

nextMandel
    +move16Bit COUNT_X, PLOT_POS_X
    lda COUNT_Y
    sta PLOT_POS_Y
    jsr calcOneMandelbrotSequence
    jsr decideToSetPoint
    bcc .skipPlot
    jsr setPoint
.skipPlot
    ; REAL <= STEP_X + REAL
    +callFunc add32Bit, STEP_X, REAL
    +inc16Bit COUNT_X
    +cmp16Bit COUNT_X, MAX_X
    bne .done
    +load16BitImmediate 0, COUNT_X
    ; REAL <= INIT_REAL
    +callFunc move32Bit, INIT_REAL, REAL
    ; IMAG <= STEP_Y + IMAG
    +callFunc add32Bit, STEP_Y, IMAG
    inc COUNT_Y
.done
    rts


; --------------------------------------------------
; This routine looks at NUM_ITER and MAX_ITER and decides if a point is set
; on the hires bitmap. If NUM_ITER == MAX_ITER then the point is always set 
; --------------------------------------------------
decideToSetPoint
    lda NUM_ITER
    cmp MAX_ITER
    bne .decide
    sec
    rts
.decide
    lsr                 ; shift lowest bit in carry => lowest bit decides if point is set
    rts


; --------------------------------------------------
; This routine visualizes the Mandelbrot set 
; --------------------------------------------------
mandelLoop
    jsr initMandel
    jsr initHiRes

.loopUntilFinished
    jsr nextMandel
    lda COUNT_Y
    cmp #200
    bne .loopUntilFinished

    jsr deInitHires
    rts