!to "mandelbr", cbm
;INCLUDE_DIAG = 1
FAST_MUL = 1


*=$4500

RES_X = 320
RES_Y = 200

JMP_TABLE
jmp readEvalPrintLoop; 0
; ----------------------------
; Calculation related stuff
; ----------------------------
jmp initMandel ;1
jmp nextMandel ;2
jmp resetParameters;3
jmp increaseZoomLevel;4
jmp deriveParametersFromPixel;5
jmp doubleStepX; 6
jmp halveStepX; 7
; ----------------------------
; Graphics stuff
; ----------------------------
jmp bitMapOn ;8
jmp bitMapOff ;9
jmp turnBitmapOn ;10
jmp resetAllColours ;11
; ----------------------------
; Lower level I/O stuff
; ----------------------------
jmp savePic ;12
jmp loadPic ;13 
jmp readAndEvalErrorChannel ; 14
; ----------------------------
; High level stuff
; ----------------------------
jmp mandelLoop ; 15
jmp loadAndDisplayPic ; 16
; ----------------------------
; Mode switching
; ----------------------------
jmp setMuticolor ; 17
jmp setHires ; 18

!ifdef INCLUDE_DIAG {
; ----------------------------
; For testing
; ----------------------------
jmp testArith ; 19
}

; ----------------------------
PLOT_FUNC_VECTOR
!byte <decideToSetPoint, >decideToSetPoint
; ----------------------------
GRAPHICS_ON_VECTOR
!byte <initHiRes, >initHiRes
; ----------------------------
GRAPHICS_OFF_VECTOR
!byte <deInitHires, >deInitHires
; ----------------------------
RESET_COLOR_VECTOR
!byte <resetColors, >resetColors
; ----------------------------
BITMAP_ON_VECTOR
!byte <turnHiresOn, >turnHiresOn
; ----------------------------
RESET_PARAMS_VECTOR
!byte <resetParametersHires, >resetParametersHires
; ----------------------------
TRANSFORM_X_COORD_VECTOR
!byte <transformXHires, >transformXHires
; ----------------------------


drawPoint
    jmp (PLOT_FUNC_VECTOR)

bitMapOn
    jmp (GRAPHICS_ON_VECTOR)

bitMapOff
    jmp (GRAPHICS_OFF_VECTOR)    

resetAllColours
    jmp (RESET_COLOR_VECTOR)

turnBitmapOn
    jmp (BITMAP_ON_VECTOR)

resetParameters
    jmp (RESET_PARAMS_VECTOR)

transformXCoord
    jmp (TRANSFORM_X_COORD_VECTOR)


; --------------------------------------------------
; values settable/usable by callers
; --------------------------------------------------

; maxmimum number of iterations
MAX_ITER
!byte 24

; Colours used for hires bitmap graphics. This value is written to the screen RAM
; as colour information
PIC_COLOURS
!byte $15

THIRD_COLOUR
!byte $03

BACKGROUND_COLOR
!byte 0

; The number of iterations used for the current point
NUM_ITER
!byte 0

; **************************************************
; The following 4 values have to be contiguously laid out
; in memory. The load and save routines expect this.

; x offset to move in complex plane for next point
STEP_X
!byte 0, $66, $66, $02, $00

; Y offset to move in complex plane for next line of picture
STEP_Y
!byte 1, $5C, $8F, $02, $00

; real part of upper left point of picture
INIT_REAL
!byte 1, 0, 0, 0, 2

; imaginary part of upper left point of picture
INIT_IMAG
!byte 0, 0, 0, 0, 1
; **************************************************

; Number of points (resolution) in x direction
MAX_X
!byte <RES_X, >RES_X 

; Number of points (resolution) in y direction
MAX_Y 
!byte RES_Y

; Device number used for load and save
DEVICE_NUM
!byte 8

; actual length of PIC_FILE_NAME
PIC_FILE_NAME_LEN
!byte 0

; File name used for load and save. 40 bytes maximum length
PIC_FILE_NAME
!byte 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0
!byte 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0
!byte 0,0,0,0, 0,0,0,0

; Contains error number of disk operation
DISK_ERROR
!byte 0

; current X position
COUNT_X
!byte 0, 0

; current y position
COUNT_Y
!byte 0


; --------------------------------------------------
; variables used for calculation
; --------------------------------------------------

REAL
!byte 0,2,0,0,0

IMAG
!byte 0,3,0,0,0

XN
!byte 0,0,0,0,0

YN
!byte 0,0,0,0,0

XN_OLD
!byte 0,0,0,0,0

TEMP_MAX
!byte 0,0,0,0,0

YN_SQUARE
!byte 0,0,0,0,0

XN_SQUARE
!byte 0,0,0,0,0

; --------------------------------------------------
; constants
; --------------------------------------------------

; The fixed value 4. When a sequence's value is greater or equal to this number
; the sequence defined by the current point diverges
VAL_MAX
!byte 0,0,0,0,4

; x offset to move in complex plane default picture (full resolution)
DEFAULT_STEP_X
!byte 0, $66, $66, $02, $00

; Y offset to move in complex plane for next line of default picture
DEFAULT_STEP_Y
!byte 1, $5C, $8F, $02, $00

; real part of upper left point of default picture
DEFAULT_INIT_REAL
!byte 1, 0, 0, 0, 2

; imaginary part of upper left point of picture default picture
DEFAULT_INIT_IMAG
!byte 0, 0, 0, 0, 1
; **************************************************


!zone arith
!source "arith16.a"

!zone string
!source "string.a"

!ifdef INCLUDE_DIAG {
!zone diag
!source "diag.a"
}

!zone hires
!source "hires.a"

!zone diskio
!source "disk_io.a"

!zone repl
!source "repl.a"


!zone main

; --------------------------------------------------
; This routine test if calcualtion of the Mandelbrot sequence should be stopped.
; It is stopped, when the iteration count reached MAX_ITER of the absolute value
; of the current sequence value is larger than 4
;
; This routine returns a nonzero value if computation has to be stopped. The zero
; flag is cleared in this case.
; --------------------------------------------------
testMandelbrotDone
    lda NUM_ITER
    cmp MAX_ITER
    bne .testLimit
    jmp .stopCalc

.testLimit
    ; *****************************
    ; abs_val = xn*xn + yn*yn
    ; *****************************

    ; XN_SQUARE <= XN
    +callFunc move32Bit, XN, XN_SQUARE
    ; XN_SQUARE <= XN_SQUARE * XN_SQUARE
    +callFunc mul32BitNormalized, XN_SQUARE, XN_SQUARE
    ; YN_SQUARE <= YN
    +callFunc move32Bit, YN, YN_SQUARE
    ; YN_SQUARE <= YN_SQUARE * YN_SQUARE
    +callFunc mul32BitNormalized, YN_SQUARE, YN_SQUARE
    ; TEMP_MAX <= XN_SQUARE
    +callFunc move32Bit, XN_SQUARE, TEMP_MAX
    ; TEMP_MAX <= YN_SQUARE + TEMP_MAX
    +callFunc add32Bit, YN_SQUARE, TEMP_MAX

    ; Stop if TEMP_MAX > 4
    ; continue if TEMP_MAX <= 4

    ; Carry is set if TEMP_MAX >= 4
    ; Zero flag is set if TEMP_MAX == 4
    +callFunc cmp32BitUnsigned, TEMP_MAX, VAL_MAX 
    bcs .greaterPerhapsEqual
.continueCalc                ; TEMP_MAX < 4
    lda #0
    rts
.greaterPerhapsEqual         ; TEMP_MAX >= 4
    beq .continueCalc        ; TEMP_MAX == 4? => If yes continue
.stopCalc
    lda #1                   ; TEMP_MAX > 4 => Stop
    rts

; --------------------------------------------------
; This routine calculates the Mandelbrot sequence for the complex value given through
; REAL und IMAG.
;
; The number of iterations performed is returned in NUM_ITER 
; --------------------------------------------------
calcOneMandelbrotSequence
    lda #1
    sta NUM_ITER

    ; REAL <= XN
    +callFunc move32Bit, REAL, XN
    ; YN <= IMAG
    +callFunc move32Bit, IMAG, YN

.loopMandelbrot
    jsr testMandelbrotDone
    beq .continueMandelbrot
    jmp .endMandelbrot

.continueMandelbrot
    ;+printByteLN NUM_ITER
    ;+printFixedPoint XN
    ;+printFixedPoint YN

    ; XN_OLD <= XN
    +callFunc move32Bit, XN, XN_OLD
    
    ; *****************************
    ; xn+1 = xn*xn - yn*yn + real
    ; *****************************

    ; XN <= XN_SQUARE
    +callFunc move32Bit, XN_SQUARE, XN
    ; YN_SQUARE <= -YN_SQUARE
    +callFuncMono neg32, YN_SQUARE
    ; XN <= YN_SQUARE + XN
    +callFunc add32Bit, YN_SQUARE, XN
    ; XN <= REAL + XN
    +callFunc add32Bit, REAL, XN

    ; *****************************
    ; yn+1 = 2*xn*yn + imag
    ; *****************************

    ; YN <= XN_OLD * YN 
    +callFunc mul32BitNormalized, XN_OLD, YN
    ; YN <= 2*YN
    +callFuncMono double32Bit, YN
    ; YN <= IMAG + YN
    +callFunc add32Bit, IMAG, YN 

    inc NUM_ITER
    jmp .loopMandelbrot

.endMandelbrot
    rts

; --------------------------------------------------
; This routine initialises the data needed for computation
;
; initMandel has no return value. 
; --------------------------------------------------
initMandel
    +load16BitImmediate 0, COUNT_X
    lda #0
    sta COUNT_Y
    ; reset complex numbers
    +callFunc move32Bit, INIT_REAL, REAL
    +callFunc move32Bit, INIT_IMAG, IMAG

    rts


; --------------------------------------------------
; This routine resets the top left corner to use in the complex
; plane and the stepping offsets in x and y direction to the default
; values for the iconic mandelset picture in hires mode
;
; resetParameters has no return value. 
; --------------------------------------------------
resetParametersHires
    +callFunc move32Bit, DEFAULT_STEP_X, STEP_X
    +callFunc move32Bit, DEFAULT_STEP_Y, STEP_Y 
    +callFunc move32Bit, DEFAULT_INIT_REAL, INIT_REAL
    +callFunc move32Bit, DEFAULT_INIT_IMAG, INIT_IMAG       
    rts

; --------------------------------------------------
; This routine resets the top left corner to use in the complex
; plane and the stepping offsets in x and y direction to the default
; values for the iconic mandelset picture in multicolor mode
;
; resetParameters has no return value. 
; --------------------------------------------------
resetParametersMulti
    jsr resetParametersHires
    +callFuncMono double32Bit, STEP_X
    rts

; --------------------------------------------------
; This routine can be used to transform the sprite coordinate which was
; used to select a new start value while the bitmap on which this pixel was
; selected was in hires. It does nothing, because in hires the coordinates
; do not need to be transformed.
; --------------------------------------------------
transformXHires
    rts

; --------------------------------------------------
; This routine can be used to transform the sprite coordinate which was
; used to select a new start value while the bitmap on which this pixel was
; selected was in multicolor mode. It halves the coordinate stored at 
; COUNT_X
; --------------------------------------------------
transformXMulticolor
    +halve16Bit COUNT_X
    rts


; --------------------------------------------------
; This routine halves the stepping width in x direction. This
; can be used when switching from multicolor to hires mode. As
; there are twice as many pixels in x direction we need to halve
; the stepping width to see the same area in the complex plane. 
; 
; halveStepX has no return value. 
; --------------------------------------------------
halveStepX
    +callFuncMono halve32Bit, STEP_X
    rts


; --------------------------------------------------
; This routine doubles the stepping width in x direction. This
; can be used when switching from hires to multicolor mode. As
; there are only halve the number of pixels in x direction we need
; to double the stepping width to see the same area in the complex plane. 
; 
; doubleStepX has no return value. 
; --------------------------------------------------
doubleStepX
    +callFuncMono double32Bit, STEP_X
    rts    


; --------------------------------------------------
; This routine halves the stepping width in x and y direction and thereby "zooms" 
; into the Mandelbrot set
;
; increaseZoomLevel has no return value. 
; --------------------------------------------------
increaseZoomLevel
    +callFuncMono halve32Bit, STEP_X
    +callFuncMono halve32Bit, STEP_Y
    rts

.TEMP_X
!byte 0,0
.TEMP_Y
!byte 0
; --------------------------------------------------
; This routine determines the point in the complex plane for which the pixel
; at COUNT_X and COUNT_Y stands
;
; deriveParametersFromPixel has no return value. As a side effect it changes
; INIT_REAL and INIT_IMAG 
; --------------------------------------------------
deriveParametersFromPixel
    +callFunc move32Bit, INIT_IMAG, IMAG
    +callFunc move32Bit, INIT_REAL, REAL

    +load16BitImmediate 0, .TEMP_X
.loopDeriveX
    +cmp16Bit COUNT_X, .TEMP_X
    beq .procYCoord
    +callFunc add32Bit, STEP_X, REAL
    +inc16Bit .TEMP_X
    jmp .loopDeriveX

.procYCoord
    lda #0
    sta .TEMP_Y
.loopDeriveY
    lda .TEMP_Y
    cmp COUNT_Y
    beq .deriveDone
    +callFunc add32Bit, STEP_Y, IMAG
    inc .TEMP_Y
    jmp .loopDeriveY

.deriveDone
    +callFunc move32Bit, IMAG, INIT_IMAG
    +callFunc move32Bit, REAL, INIT_REAL

    rts

; --------------------------------------------------
; This routine configures the program to use the multicolor mode
;
; setMuticolor has no return value. 
; --------------------------------------------------
setMuticolor
    +load16BitImmediate 160, MAX_X 
    +load16BitImmediate decideToSetPointColor, PLOT_FUNC_VECTOR
    +load16BitImmediate initMuticolor, GRAPHICS_ON_VECTOR
    +load16BitImmediate deInitMulticolor, GRAPHICS_OFF_VECTOR
    +load16BitImmediate resetMulticolors, RESET_COLOR_VECTOR
    +load16BitImmediate turnMulticolorOn, BITMAP_ON_VECTOR
    +load16BitImmediate resetParametersMulti, RESET_PARAMS_VECTOR
    +load16BitImmediate transformXMulticolor, TRANSFORM_X_COORD_VECTOR

    rts

; --------------------------------------------------
; This routine configures the program to use the hires mode
;
; setHires has no return value. 
; --------------------------------------------------
setHires
    +load16BitImmediate RES_X, MAX_X 
    +load16BitImmediate decideToSetPoint, PLOT_FUNC_VECTOR
    +load16BitImmediate initHiRes, GRAPHICS_ON_VECTOR
    +load16BitImmediate deInitHires, GRAPHICS_OFF_VECTOR
    +load16BitImmediate resetColors, RESET_COLOR_VECTOR
    +load16BitImmediate turnHiresOn, BITMAP_ON_VECTOR
    +load16BitImmediate resetParametersHires, RESET_PARAMS_VECTOR
    +load16BitImmediate transformXHires, TRANSFORM_X_COORD_VECTOR

    rts

; --------------------------------------------------
; This routine performs all necessary calculations for one point in the
; complex plane. Calling this routine repeatedly calculates and draws the
; selected rectangular part of the Mandelbrot set. If COUNT_Y reaches 200
; all pixels have been drawn.
;
; nextMandel has no return value. 
; --------------------------------------------------
nextMandel
    +move16Bit COUNT_X, PLOT_POS_X
    lda COUNT_Y
    sta PLOT_POS_Y
    jsr calcOneMandelbrotSequence
    jsr drawPoint
    ; REAL <= STEP_X + REAL
    +callFunc add32Bit, STEP_X, REAL
    +inc16Bit COUNT_X
    +cmp16Bit COUNT_X, MAX_X
    bne .done
    +load16BitImmediate 0, COUNT_X
    ; REAL <= INIT_REAL
    +callFunc move32Bit, INIT_REAL, REAL
    ; IMAG <= STEP_Y + IMAG
    +callFunc add32Bit, STEP_Y, IMAG
    inc COUNT_Y
.done
    rts


; --------------------------------------------------
; This routine looks at NUM_ITER and MAX_ITER and decides if a point is set
; on the hires bitmap. If NUM_ITER == MAX_ITER then the point is always set 
; --------------------------------------------------
decideToSetPoint
    lda NUM_ITER
    cmp MAX_ITER
    beq .doPlot
    lsr                 ; shift lowest bit in carry => lowest bit decides if point is set
    bcc .skipPlot
.doPlot
    jsr setPoint
.skipPlot
    rts


MOD_TAB
!byte 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1 
!byte 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2 
!byte 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3 
!byte 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1 
!byte 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2 
!byte 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3 
!byte 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1 
!byte 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2 
!byte 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3 
!byte 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1 
!byte 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2 
!byte 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3 
!byte 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1 
!byte 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2 
!byte 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3 
!byte 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1

; --------------------------------------------------
; This routine looks at NUM_ITER and MAX_ITER and decides what color a point is set to
; on the multicolor bitmap. If NUM_ITER == MAX_ITER then the point is not set 
; --------------------------------------------------
decideToSetPointColor
    lda NUM_ITER
    cmp MAX_ITER
    beq .skipPlotMulti
    tay
    lda MOD_TAB,y
    sta PLOT_COL
    jsr setPointMulticolor
.skipPlotMulti
    rts


; --------------------------------------------------
; This routine visualizes the Mandelbrot set 
; --------------------------------------------------
mandelLoop
    jsr initMandel
    jsr bitMapOn

.loopUntilFinished
    jsr nextMandel
    lda COUNT_Y
    cmp MAX_Y
    bne .loopUntilFinished

    jsr bitMapOff
    jsr savePic
    rts

; --------------------------------------------------
; This routine loads the picture and then switches to hires 
; --------------------------------------------------
loadAndDisplayPic
    jsr loadPic
    lda DISK_ERROR
    bne .loadDiskError
    jsr turnBitmapOn
.loadDiskError
    rts


PROG_END
    !byte 0