

VIC = $D000
BITMAP = $2000
BITMAP_END = BITMAP + 8192
COLOR_DATA = $0400
COLOR_RAM = $D800

ADDR_POINTER = $9E;/$9F
ADDR_POINTER2 = $03;/$04
ZP_HELPADR1 = ADDR_POINTER2

!macro memsetImmediate .val, .startAddr, .numBlocks {
    lda #.val
    sta MEM_VAL

    lda #<.startAddr
    sta ADDR_POINTER
    lda #>.startAddr+1
    sta ADDR_POINTER+1
    
    lda #.numBlocks
    sta TEMP_NUM_BLOCKS
    jsr memsetCall
}

!macro memsetAddr .colAddr, .startAddr, .numBlocks {
    lda .colAddr
    sta MEM_VAL

    lda #<.startAddr
    sta ADDR_POINTER
    lda #>.startAddr+1
    sta ADDR_POINTER+1
    
    lda #.numBlocks
    sta TEMP_NUM_BLOCKS
    jsr memsetCall
}


; --------------------------------------------------
; This routine turns the hires mode on
; --------------------------------------------------
initHiRes
    +memsetImmediate 0, BITMAP, 32
turnHiresOn
    ; turn hires bitmap on
    lda VIC+17
    ora #%00100000
    sta VIC+17
    ; move bitmap memory to $2000 => set bit 3
    lda VIC+24
    ora #%00001000
    sta VIC+24

resetColors
    +memsetAddr PIC_COLOURS, COLOR_DATA, 4

    rts

; --------------------------------------------------
; This routine turns the multicolor bit map mode on
; --------------------------------------------------
initMuticolor
    +memsetImmediate 0, BITMAP, 32
turnMulticolorOn
    ; turn hires bitmap on
    lda VIC+17
    ora #%00100000
    sta VIC+17
    ; move bitmap memory to $2000 => set bit 3
    lda VIC+24
    ora #%00001000
    sta VIC+24
    ; turn muticolor on
    lda VIC+22                         
    ora #%00010000                     
    sta VIC+22    

resetMulticolors
    +memsetAddr PIC_COLOURS, COLOR_DATA, 4
    +memsetAddr THIRD_COLOUR, COLOR_RAM, 4
    lda BACKGROUND_COLOR
    sta 53281

    rts


; --------------------------------------------------
; This routine turns the hires mode off
; --------------------------------------------------
deInitHires
    ; turn hires bitmap off
    lda VIC+17
    and #%11011111
    sta VIC+17
    ; clear bit 3 again
    lda VIC+24
    and #%11110111
    sta VIC+24

    +memsetImmediate 32, COLOR_DATA, 4

    rts 

; --------------------------------------------------
; This routine turns the  multicolor mode off
; --------------------------------------------------
deInitMulticolor
    ; turn hires bitmap off
    lda VIC+17
    and #%11011111
    sta VIC+17
    ; clear bit 3 again
    lda VIC+24
    and #%11110111
    sta VIC+24
    ; turn muticolor off
    lda VIC+22                         
    and #%11101111                     
    sta VIC+22    

    +memsetImmediate 32, COLOR_DATA, 4
    +memsetAddr 0, COLOR_RAM, 4    

    rts 


MEM_VAL
!byte 0
TEMP_NUM_BLOCKS
!byte 0
; --------------------------------------------------
; This routine sets all bytes of the referenced memory to a
; specified value.
; 
; ADDR_POINTER          has to contain the start address of the memory area
; TEMP_NUM_BLOCKS       has to contain the number of 256 byte blocks to clear
; MEM_VAL               has to contain the value to which memory is set
; --------------------------------------------------
memsetCall
    ldy #0
    ldx TEMP_NUM_BLOCKS
    lda MEM_VAL
.processBlock 
    sta (ADDR_POINTER), y
    iny
    bne .processBlock
    inc ADDR_POINTER+1
    dex
    bne .processBlock
    
    rts

!macro memcpyAddr .addrSource, .addrTarget, .numBlocks {
    lda #.numBlocks
    sta TEMP_NUM_BLOCKS
    +load16BitImmediate .addrSource, ADDR_POINTER
    +load16BitImmediate .addrTarget, ADDR_POINTER2

    jsr memcpyCall
}

; --------------------------------------------------
; This routine copies a number of 256 byte blocks between two addresses. The two memory
; areas must not overlap
; 
; ADDR_POINTER          has to contain the start address of the source memory area
; ADDR_POINTER2         has to contain the start address of the target memory area
; TEMP_NUM_BLOCKS       has to contain the number of 256 byte blocks to copy
; --------------------------------------------------
memcpyCall
    ldy #0
    ldx TEMP_NUM_BLOCKS
.processBlockCpy
    lda (ADDR_POINTER), y
    sta (ADDR_POINTER2), y
    iny
    bne .processBlockCpy
    inc ADDR_POINTER+1
    inc ADDR_POINTER2+1
    dex
    bne .processBlockCpy
    
    rts


PLOT_POS_X
!byte 0,0
PLOT_POS_Y
!byte 0
PLOT_COL
!byte 0


; lo byte of 0,1,2,3,4,5, ... , 24 * 320
.LINE_OFFSET_LSB
!byte 0, 64, 128, 192, 0, 64, 128, 192, 0, 64, 128, 192, 0, 64, 128, 192, 0, 64, 128, 192, 0, 64, 128, 192, 0
; hi byte of 0,1,2,3,4,5, ... , 24 * 320 
.LINE_OFFSET_MSB
!byte 0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30 
.MOD8_X_POS
!byte 0
.MOD8_Y_POS
!byte 0

.DIV_8_MUL8_X_POS
!byte 0,0
.DIV_8_Y_POS
!byte 0,0

.PLOT_BYTE_OFFSET
!byte 0,0
; --------------------------------------------------
; This routine calculates the address of a bit/point on the bitmap 
; 
; Input:
; PLOT_POS_X            address of lo byte of the x position of the point
; PLOT_POS_Y            address where y position of the point is stored
;
; Output:
; ADDR_POINTER/ADDR_POINTER+1   The base address of the 8x8 tile which contains the point 
; Y-Register                    The byte offset of the point in the 8x8 tile
; X-Register                    The bit number in the byte referenced by y that corresponds to the point 
; --------------------------------------------------
calcBitmapAddr
    ; PLOT_POS_X mod 8 => *.MOD8_X_POS
    lda PLOT_POS_X
    and #%00000111
    sta .MOD8_X_POS

    ; PLOT_POS_Y mod 8 => *.MOD8_Y_POS
    lda PLOT_POS_Y
    and #%00000111
    sta .MOD8_Y_POS

    ; (PLOT_POS_X div 8) * 8 => *.DIV_8_MUL8_X_POS
    lda PLOT_POS_X
    and #%11111000
    sta .DIV_8_MUL8_X_POS
    lda PLOT_POS_X+1
    sta .DIV_8_MUL8_X_POS+1

    ; PLOT_POS_Y div 8 => x
    lda PLOT_POS_Y
    lsr 
    lsr
    lsr
    tax

    ; *PLOT_POS_Y div 8 * 320 => *.PLOT_BYTE_OFFSET
    lda .LINE_OFFSET_LSB, x
    sta .PLOT_BYTE_OFFSET
    lda .LINE_OFFSET_MSB, x
    sta .PLOT_BYTE_OFFSET + 1

    ; *.PLOT_BYTE_OFFSET + *.DIV_8_MUL8_X_POS + BITMAP => ADDR_POINTER
    +add16Bit .DIV_8_MUL8_X_POS, .PLOT_BYTE_OFFSET
    +add16BitImmediate BITMAP, .PLOT_BYTE_OFFSET
    +move16Bit .PLOT_BYTE_OFFSET, ADDR_POINTER

    ; load byte offset in 8x8 pixel tile
    ldy .MOD8_Y_POS
    ; load offset of bit mask in byte
    ldx .MOD8_X_POS
    rts


.BIT_TAB
!byte 128, 64, 32, 16, 8, 4, 2, 1
; --------------------------------------------------
; This routine sets a point on the bitmap 
; 
; Input:
; PLOT_POS_X            address of lo byte of the x position of the point
; PLOT_POS_Y            address where y position of the point is stored
; --------------------------------------------------
setPoint
    jsr calcBitmapAddr
    ; set pixel
    lda (ADDR_POINTER),y
    ora .BIT_TAB,x
    sta (ADDR_POINTER),y

    rts



.NUM_SHIFT_TAB
!byte 3,3,2,2,1,1,0,0
; The original code had an oddity which had the consequence
; that colors 1 and 2 are switched, in order to conserve the color
; scheme we reimplement this "feature".
.COL_TRANS_TAB
!byte 0, 2, 1, 3
.MULTICOL_MASK
!byte 0
; --------------------------------------------------
; This routine sets a point in the multixolor bitmap.
; 
; PLOT_POS_X            has to contain the x position of the point
; PLOT_POS_Y            has to contain the y position of the point
; PLOT_COL              has to contain the number of the color (0-3)
; --------------------------------------------------
setPointMulticolor
    lda #0
    sta PLOT_POS_X+1                                ; clear hi byte of POS_X
    +double16Bit PLOT_POS_X                         ; Multiply xpos by two
    
    ; transform color values
    ldy PLOT_COL
    lda .COL_TRANS_TAB, y
    sta .MULTICOL_MASK

    jsr calcBitmapAddr                              ; calculate target byte and offsets
    lda .NUM_SHIFT_TAB, x                           ; number of shifts necessary
    tax                                             ; move that to the x register
    ; shift color mask the necessary number of positions
    lda .MULTICOL_MASK
.loopShiftMask
    cpx #0
    beq .doneShift
    asl
    asl
    dex
    jmp .loopShiftMask
.doneShift
    sta .MULTICOL_MASK
    lda (ADDR_POINTER), y
    ora .MULTICOL_MASK
    sta (ADDR_POINTER), y
    rts
