
GETIN   = $FFE4
CHAROUT = $FFD2
PLOT    = $FFF0
CHRIN   = $FFCF

HEX_CHARS
!tx "0123456789ABCDEF"

TEMP_PTR = $03
TEMP_PTR2 = $05

LO_NIBBLE
!byte 0

; --------------------------------------------------
; This routine prints a fixed point number to the screen. The address
; of the number has to be given in $0003/$0004
;
; The number of iterations performed is returned in NUM_ITER 
; --------------------------------------------------
printNumHex
    ldy #0
    lda (TEMP_PTR), y
    bne .printMinus
    lda #43
    jsr CHAROUT
    jmp .egal
.printMinus
    lda #45
    jsr CHAROUT
.egal

    ldy #4
.loopPrint
    lda (TEMP_PTR), y
    jsr printByte
    dey
    bne .loopPrint
    jsr printCRLF
    rts

!macro printFixedPoint .addr {
    lda #<.addr
    sta TEMP_PTR
    lda #>.addr
    sta TEMP_PTR+1
    jsr printNumHex
} 

printByteCRLF
    jsr printByte
    jsr printCRLF
    rts

printByte
    jsr splitByte
    stx LO_NIBBLE
    tax
    lda HEX_CHARS, X
    jsr CHAROUT
    ldx LO_NIBBLE
    lda HEX_CHARS, X
    jsr CHAROUT
    rts

printCRLF
    lda #13
    jsr CHAROUT
    lda #10
    jsr CHAROUT
    rts

.CONV_TEMP
!byte 0
; --------------------------------------------------
; This routine splits the value in accu its nibbles. The lower nibble 
; is returned in x and its upper nibble in the accu
; --------------------------------------------------
splitByte
    sta .CONV_TEMP
    and #$0F
    tax
    lda .CONV_TEMP
    and #$F0
    lsr
    lsr 
    lsr 
    lsr
    rts

!macro printByteLN .addr {
    lda .addr
    jsr printByteCRLF
}

; --------------------------------------------------
; Wait for a key and return ASCII Code of key in Accumulator
; 
; INPUT:  None
; OUTPUT: ASCII code of read character in accumulator
; --------------------------------------------------
waitForKey
    jsr GETIN         ; get key from keyboard
    cmp #0            ; if 0, no key pressed
    beq waitForKey    ; loop if no key pressed

    rts               ; ASCII Code of pressed key is now in accumulator


STR_LEN_TEMP
!byte 0
; --------------------------------------------------
; This routine copies a string referenced via TEMP_PTR to a string
; referenced by TEMP_PTR2. The first byte of a string is a length
; value followed by the characters of the string. The maximum length
; of a string including the length byte es 255 bytes. This also means
; that a sting can contain at most 254 characters.
; --------------------------------------------------
stringCopy
    ldy #0
    lda (TEMP_PTR),y
    sta STR_LEN_TEMP
    inc STR_LEN_TEMP                      ; take length byte into account
.copyLoop
    lda (TEMP_PTR),y
    sta (TEMP_PTR2),y
    iny
    cpy STR_LEN_TEMP
    bne .copyLoop    
    rts

!macro strCpy .addr1, .addr2 {
    +load16BitImmediate .addr1, TEMP_PTR
    +load16BitImmediate .addr2, TEMP_PTR2
    jsr stringCopy
}

!macro locate .posx, .posy {
    clc
    ldx #.posy
    ldy #.posx
    jsr PLOT
} 

!macro locateAddr .addrx, .addry {
    clc
    ldx .addry
    ldy .addrx
    jsr PLOT
} 


PRINT_LEN
!byte 0
; --------------------------------------------------
; This routine prints a string referenced via TEMP_PTR to the screen
; --------------------------------------------------
printString
    ldy #0
    lda (TEMP_PTR),Y                   ; load length byte
    sta PRINT_LEN
    +inc16Bit TEMP_PTR                 ; move pointer to first byte of string
.loopPrintStr
    cpy PRINT_LEN                      ; check current print index first to handle zero length strings correctly
    beq .printDone
    lda (TEMP_PTR),y
    jsr CHAROUT
    iny
    jmp .loopPrintStr
.printDone
    rts

!macro printStr .addr {
    +load16BitImmediate .addr, TEMP_PTR
    jsr printString
}

!macro printStrAt .posx, .posy, .addr {
    +locate .posx, .posy
    +printStr .addr
}

.LEN_OUTPUT
!byte 0
.LEN_ALLOWED
!byte 0
.INDEX_OUTPUT
!byte 0
.INPUT_CHAR
!byte 0
; --------------------------------------------------
; This routine implements a robust string input allowing only characters
; from a given set. The address of the target buffer has to be specified in
; TEMP_PTR. TEMP_PTR2 has to point to the set of allowed characters.
; The x register has to contain the length of the target buffer and the y
; register the length of the set of allowed characters.
;
; This routine returns the length of the string entered in the accu
; --------------------------------------------------
getString
    stx .LEN_OUTPUT
    sty .LEN_ALLOWED
    jsr clearInputBuffer
    lda #0
    sta .INDEX_OUTPUT

.inputLoop
    jsr showCursor
    jsr waitForKey

    cmp #13
    beq .inputDone
    cmp #20
    beq .delete
    sta .INPUT_CHAR
    jsr .checkIfInSet
    bne .inputLoop

    lda .INPUT_CHAR
    ldy .INDEX_OUTPUT
    cpy .LEN_OUTPUT
    beq .inputLoop
    sta (TEMP_PTR), y
    inc .INDEX_OUTPUT
    jsr CHAROUT
    jmp .inputLoop

.delete
    lda .INDEX_OUTPUT
    beq .inputLoop
    dec .INDEX_OUTPUT
    lda #20
    jsr CHAROUT
    jmp .inputLoop

.inputDone
    jsr clearCursor
    lda .INDEX_OUTPUT
    rts


.checkIfInSet
    ldy #0
.checkLoop
    cmp (TEMP_PTR2),Y
    beq .found                     ; zero flag is set when routine returns
    iny 
    cpy .LEN_ALLOWED
    bne .checkLoop
    ldy #1                         ; zero flag is clear when routine returns
.found
    rts

showCursor
    lda #164
    jsr CHAROUT
    lda #157
    jsr CHAROUT
    rts

clearCursor
    lda #32
    jsr CHAROUT
    lda #157
    jsr CHAROUT
    rts


!macro inputStr .targetStr, .allowedStr {
    +load16BitImmediate .targetStr+1, TEMP_PTR
    ldx .targetStr
    +load16BitImmediate .allowedStr+1, TEMP_PTR2
    ldy .allowedStr
    jsr getString
    sta .targetStr
}


.TEMP_X
!byte 0
.TEMP_Y
!byte 0
.TEMP_SIZE
!byte 0
; --------------------------------------------------
; clearInputBuffer prints as many spaces as the value of the accu indicates
;
; This routine does not return a value
; --------------------------------------------------
clearInputBuffer
    sta .TEMP_SIZE

    sec
    jsr PLOT
    stx .TEMP_Y
    sty .TEMP_X

    ldy #0
    lda #32
.loopClear
    cpy .TEMP_SIZE
    beq .doneClear 
    jsr $FFD2
    iny
    jmp .loopClear
    
.doneClear
    clc
    ldx .TEMP_Y
    ldy .TEMP_X
    jsr PLOT

    rts